#!/usr/bin/python
# -- coding: UTF-8 --

import sys
import sx126x
import threading
import time
import select
import termios
import tty

# Save old terminal settings and set to cbreak mode
old_settings = termios.tcgetattr(sys.stdin)
tty.setcbreak(sys.stdin.fileno())

# Set up the LoRa node
node = sx126x.sx126x(serial_num="/dev/ttyS0", freq=868, addr=0, power=22, rssi=True, air_speed=2400, relay=False)

# Flag to control receiving
running = True

def receive_message():
    while running:
        try:
            message = node.receive()
            if message:
                # Decode and print the received message
                decoded_message = message.decode(errors='ignore')
                
                # Print raw message
                print(f"Received: {decoded_message}")
                
                # Parse the message
                try:
                    # Expected message format: "Voltage:{voltage}V,Current:{current}A,Energy:{energy}Wh,Power:{power}W"
                    parts = decoded_message.split(',')
                    data = {}
                    for part in parts:
                        key, value = part.split(':')
                        data[key] = value
                    
                    # Extract and print each parameter
                    voltage = data.get('Voltage', 'N/A')
                    current = data.get('Current', 'N/A')
                    energy = data.get('Energy', 'N/A')
                    power = data.get('Power', 'N/A')
                    
                    print(f"Voltage: {voltage}V")
                    print(f"Current: {current}A")
                    print(f"Energy: {energy}Wh")
                    print(f"Power: {power}W")
                    
                except Exception as parse_error:
                    print(f"Error parsing message: {parse_error}")
            
            time.sleep(0.1)  # Polling delay
        except Exception as e:
            print(f"Error receiving message: {e}")

def main():
    global running

    print("Press 'q' to quit")
    
    # Start receiving in a separate thread
    receive_thread = threading.Thread(target=receive_message)
    receive_thread.start()

    while True:
        if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
            c = sys.stdin.read(1)
            if c == 'q':
                running = False
                break

    # Wait for the receiving thread to finish
    receive_thread.join()

    # Restore terminal settings
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
    print("Exiting...")

if __name__ == "__main__":
    main()
