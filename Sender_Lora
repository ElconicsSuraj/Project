#!/usr/bin/python
# -- coding: UTF-8 --

import sys
import sx126x
import threading
import time
import random
import select
import termios
import tty

# Save old terminal settings and set to cbreak mode
old_settings = termios.tcgetattr(sys.stdin)
tty.setcbreak(sys.stdin.fileno())

# Set up the LoRa node
node = sx126x.sx126x(serial_num="/dev/ttyS0", freq=868, addr=0, power=22, rssi=True, air_speed=2400, relay=False)

# Flag to control sending
running = True
send_success = True

def send_message():
    global send_success
    while running:
        if send_success:
            try:
                # Generate random values for voltage, current, energy, and power
                voltage = round(random.uniform(3.0, 5.0), 2)  # Example range 3.0 to 5.0 volts
                current = round(random.uniform(0.1, 2.0), 2)  # Example range 0.1 to 2.0 amps
                energy = round(random.uniform(0.1, 10.0), 2)  # Example range 0.1 to 10.0 watt-hours
                power = round(voltage * current, 2)            # Power = Voltage * Current

                # Prepare the message data
                message = f"Voltage:{voltage}V,Current:{current}A,Energy:{energy}Wh,Power:{power}W"
                offset_frequency = node.freq - (850 if node.freq > 850 else 410)
                
                # Prepare the message data
                data = bytes([0]) + bytes([0]) + bytes([offset_frequency]) + bytes([node.addr >> 8]) + bytes([node.addr & 0xff]) + bytes([node.offset_freq]) + message.encode()
                node.send(data)
                
                print(f"Sent: {message}")
                send_success = True  # Mark send as successful
            except Exception as e:
                print(f"Send failed: {e}")
                send_success = False  # Mark send as failed
        time.sleep(1)  # Send every 1 second

def main():
    global running

    print("Press 'q' to quit")
    
    # Start sending in a separate thread
    send_thread = threading.Thread(target=send_message)
    send_thread.start()

    while True:
        if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):
            c = sys.stdin.read(1)
            if c == 'q':
                running = False
                break

    # Wait for the sending thread to finish
    send_thread.join()

    # Restore terminal settings
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
    print("Exiting...")

if __name__ == "__main__":
    main()
